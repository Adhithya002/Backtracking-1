17. Letter Combinations of a Phone Number

Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

class Solution {
    List<String> res = null;
    String [] strMap = {"0","1","abc", "def","ghi","jkl","mno","pqrs","tuv","wxyz"};
    public List<String> letterCombinations(String digits) {
        res = new ArrayList<>();
        if(digits.length() == 0){
            return res;
        }
        dfs(0,digits,new StringBuilder());
        return res;
    }

    void dfs(int length ,String digits,StringBuilder temp){

        if(length == digits.length()){
            res.add(temp.toString());
            return; 
        }

        char ch = digits.charAt(length);
        String str = strMap[ch -'0'];

        for(char c:str.toCharArray()){
            temp.append(c);
            dfs(length+1,digits,temp);
            temp.deleteCharAt(temp.length()-1);
        }

    }
}

301. Remove Invalid Parentheses

Given a string s that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return a list of unique strings that are valid with the minimum number of removals. You may return the answer in any order.

class Solution {
    public List<String> removeInvalidParentheses(String s) {
        List<String> ans=new ArrayList<>();
        HashSet<String> set=new HashSet<String>();
        
        int minBracket=removeBracket(s);
        getAns(s, minBracket,set,ans);
        
        return ans;
    }
    
    public void getAns(String s, int minBracket, HashSet<String> set, List<String> ans){
        if(set.contains(s)) return;
        
        set.add(s);
        
        if(minBracket==0){
            int remove=removeBracket(s);   
            if(remove==0) ans.add(s);
            return;
        }
        
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)!='(' && s.charAt(i)!=')') continue;
            String L=s.substring(0,i);
            String R=s.substring(i+1);
            
            if(!set.contains(L+R)) getAns(L+R,minBracket-1,set,ans);
        }
    }
    
    public int removeBracket(String s){
        Stack<Character> stack=new Stack<>();
        
        for(int i=0;i<s.length();i++){
            char x=s.charAt(i);
            
            if(x=='(') stack.push(x);
            else if(x==')'){
                if(!stack.isEmpty() && stack.peek()=='(') stack.pop();
                else stack.push(x);
            } 
        }
        return stack.size();
    }
}

90. Subsets II

Given an integer array nums that may contain duplicates, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

class Solution {
    public List<List<Integer>> subsetsWithDup(int[] nums) {

      List<Integer>temp= new ArrayList<>();
      List<List<Integer>>res = new ArrayList<>();
      Arrays.sort(nums);

      backtrack(nums,res,temp,0);

      return res;   
    }

    private void backtrack(int[]nums, List<List<Integer>>res, List<Integer>temp, int start){
 
    res.add(new ArrayList<>(temp));

    for(int i=start;i<nums.length;i++){
        if(i>start && nums[i]==nums[i-1])continue;

        temp.add(nums[i]);
        backtrack(nums,res,temp,i+1);
        temp.remove(temp.size()-1);
    }

    }

}

47. Permutations II

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
         Set<List<Integer>> ans = new HashSet();
	        helper(nums,0,ans);
	        return new ArrayList(ans);
    }
     public void helper(int[] nums, int index, Set<List<Integer>> ans)
	    {
	    	if(index==nums.length)
	    	{
	    		    ArrayList<Integer> list =new ArrayList<>();
	    	        for(int i = 0 ; i<nums.length ; i++){
	    	            list.add(nums[i]);
	    	        }
	    	        ans.add(list);
	    	        return;
	    	}
	    	
	        for(int i = index; i<nums.length; i++)
	        {
	            swap(i,index,nums);
	            helper(nums, index+1, ans);
	            swap(i,index,nums);
	        }
	    }
	    public static void swap(int i , int j, int[] nums){
	    	  int t=nums[i];
	    	    nums[i]=nums[j];
	    	    nums[j]=t;
	    }
}

46. Permutations

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

class Solution {
    private List<List<Integer>> ans = new ArrayList<>();

    private void recur(int[] nums, int i) {
        if (i == nums.length) {
            List<Integer> temp = new ArrayList<Integer>();
            for (int num : nums) temp.add(num);
            ans.add(temp);
            return;
        }
        for (int j = i; j < nums.length; j++) {
            swap(nums, i, j);
            recur(nums, i + 1);
            swap(nums, i, j);
        }
    }
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public List<List<Integer>> permute(int[] nums) {
        recur(nums, 0);
        return ans;
    }
}

78. Subsets

Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> resList=new ArrayList<>();
        resList.add(new ArrayList<Integer>());
        subsetsHelper(resList,0,nums,new ArrayList<Integer>());
        return resList;
    }
    public void subsetsHelper(List<List<Integer>> resList,int index,int[] nums,ArrayList<Integer> arrList){
        if(index==nums.length) return ;
        for(int i=index;i<nums.length;i++){
            arrList.add(nums[i]);
            resList.add(new ArrayList<Integer>(arrList));
            subsetsHelper(resList,i+1,nums,arrList);
            arrList.remove(arrList.size()-1);
        }
    }
}

 
 